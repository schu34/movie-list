// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/tabbed/pqtype"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, year, imdb_url, reccomender, tags)
  VALUES ($1, $2, $3, $4, $5)
RETURNING
  movieid, title, year, imdb_url, reccomender, tags
`

type CreateMovieParams struct {
	Title       string
	Year        sql.NullInt32
	ImdbUrl     sql.NullString
	Reccomender sql.NullString
	Tags        pqtype.NullRawMessage
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Title,
		arg.Year,
		arg.ImdbUrl,
		arg.Reccomender,
		arg.Tags,
	)
	var i Movie
	err := row.Scan(
		&i.Movieid,
		&i.Title,
		&i.Year,
		&i.ImdbUrl,
		&i.Reccomender,
		&i.Tags,
	)
	return i, err
}

const getMovie = `-- name: GetMovie :one
SELECT
  movieid, title, year, imdb_url, reccomender, tags
FROM
  movies
WHERE
  movieId = $1
LIMIT 1
`

func (q *Queries) GetMovie(ctx context.Context, movieid int32) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, movieid)
	var i Movie
	err := row.Scan(
		&i.Movieid,
		&i.Title,
		&i.Year,
		&i.ImdbUrl,
		&i.Reccomender,
		&i.Tags,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT
  movieid, title, year, imdb_url, reccomender, tags
FROM
  movies
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.Movieid,
			&i.Title,
			&i.Year,
			&i.ImdbUrl,
			&i.Reccomender,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
